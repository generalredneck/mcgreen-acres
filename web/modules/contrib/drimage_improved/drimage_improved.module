<?php

/**
 * @file
 * DrImage core functions.
 */

use Drupal\Core\Config\ConfigImporter;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\crop\CropTypeInterface;
use Drupal\drimage_improved\Controller\ImageStyleListBuilder;
use Drupal\drimage_improved\Controller\ImageStyleWithPipelineListBuilder;
use Drupal\imageapi_optimize\ImageAPIOptimizePipelineInterface;

/**
 * Implements hook_help().
 */
function drimage_improved_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'drimage_improved.image':
      return '<p>' . t('For a full description of the module, visit the project page: https://drupal.org/project/drimage_improved') . '</p>';
  }
}

/**
 * Implements hook_theme().
 */
function drimage_improved_theme() {
  return [
    'drimage_formatter' => [
      'variables' => [
        'item' => NULL,
        'item_attributes' => NULL,
        'image_style' => NULL,
        'core_webp' => NULL,
        'imageapi_optimize_webp' => NULL,
        'url' => NULL,
        'alt' => NULL,
        'width' => NULL,
        'height' => NULL,
        'data' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_entity_type_alter().
 */
function drimage_improved_entity_type_alter(array &$entity_types): void {
  if (isset($entity_types['imageapi_optimize_pipeline'])) {
    $entity_types['image_style']->setListBuilderClass(ImageStyleWithPipelineListBuilder::class);
  }
  else {
    $entity_types['image_style']->setListBuilderClass(ImageStyleListBuilder::class);
  }
}

/**
 * Implements hook_module_implements_alter().
 *
 * Moves drimage_improved_entity_type_alter to the back, to override the imageapi_optimize override if present.
 */
function drimage_improved_module_implements_alter(array &$implementations, string $hook): void {
  if ($hook == 'entity_type_alter') {
    $group = $implementations['drimage_improved'];
    unset($implementations['drimage_improved']);
    $implementations['drimage_improved'] = $group;
  }
}

/**
 * Implements hook_modules_uninstalled().
 */
function drimage_improved_modules_uninstalled(array $modules, bool $isSyncing): void {
  if ($isSyncing) {
    // Let's deal with this in drimage_improved_config_import_steps_alter().
    return;
  }

  $modulesToCheck = ['image_widget_crop', 'automated_crop', 'focal_point'];
  if (array_intersect($modulesToCheck, $modules)) {
    \Drupal::service('drimage_improved.image_style_repository')
      ->deleteAll();
  }
}

/**
 * Implements hook_modules_installed().
 */
function drimage_improved_modules_installed(array $modules, bool $isSyncing): void {
  if ($isSyncing) {
    // Let's deal with this in drimage_improved_config_import_steps_alter().
    return;
  }

  $modulesToCheck = ['image_widget_crop', 'automated_crop', 'focal_point'];
  if (array_intersect($modulesToCheck, $modules)) {
    \Drupal::service('drimage_improved.image_style_repository')
      ->deleteAll();
  }
}

/**
 * Implements hook_config_import_steps_alter().
 *
 * Delete all drimage_improved image styles after certain modules are (un)installed.
 */
function drimage_improved_config_import_steps_alter(array &$syncSteps, ConfigImporter $configImporter): void {
  $modulesToCheck = ['image_widget_crop', 'automated_crop', 'focal_point'];
  $uninstalledModules = $configImporter->getExtensionChangelist('module', 'uninstall');
  $installedModules = $configImporter->getExtensionChangelist('module', 'install');

  if (array_intersect($modulesToCheck, $uninstalledModules) || array_intersect($modulesToCheck, $installedModules)) {
    $syncSteps[] = '_drimage_improved_config_import_delete_image_styles';
  }
}

/**
 * Helper function to delete all drimage_improved image styles.
 */
function _drimage_improved_config_import_delete_image_styles(array &$context, ConfigImporter $configImporter): void {
  \Drupal::service('drimage_improved.image_style_repository')
    ->deleteAll();
  $context['finished'] = 1;
}

/**
 * Implements hook_ENTITY_TYPE_update().
 *
 * Delete all drimage_improved image styles if the default pipeline is updated.
 */
function drimage_improved_imageapi_optimize_pipeline_update(ImageAPIOptimizePipelineInterface $entity): void {
  $config = \Drupal::config('imageapi_optimize.settings');

  if ($config->get('default_pipeline') !== $entity->id()) {
    return;
  }

  \Drupal::service('drimage_improved.image_style_repository')
    ->deleteAll();
}

/**
 * Implements hook_ENTITY_TYPE_update().
 *
 * Delete all drimage_improved image styles related to a crop type if it is updated.
 */
function drimage_improved_crop_type_update(CropTypeInterface $entity): void {
  \Drupal::service('drimage_improved.image_style_repository')
    ->deleteByCropType($entity);
}

/**
 * Implements hook_page_attachments().
 */
function drimage_improved_page_attachments(array &$attachments) {
  // Get drimage_improved settings.
  $settings = \Drupal::config('drimage_improved.settings');
  $dimentions = [];
  // Load all image styles.
  $styles = \Drupal::entityTypeManager()
    ->getStorage('image_style')
    ->loadMultiple();
  foreach ($styles as $name => $style) {
    // Calculate the dimensions from the style name.
    $translated_name = str_replace('drimage_improved_', '', $name);
    if (\Drupal::moduleHandler()->moduleExists('focal_point')) {
      $translated_name = str_replace('focal_', '', $translated_name);
    }
    // Skip image styles without drimage_improved_ prefix.
    if ($name == $translated_name) {
      continue;
    }
    $dimensions = explode('_', $translated_name);
    // Skip image styles that will only scale.
    if ($dimensions[1] <= 0) {
      continue;
    }
    $dimentions[] = [
      'name' => $name,
      'width' => $dimensions[0],
      'height' => $dimensions[1],
    ];
  }
  $attachments['#attached']['drupalSettings']['drimage_improved']['ratio_distortion'] = $settings->get('ratio_distortion');
  $attachments['#attached']['drupalSettings']['drimage_improved']['dimentions'] = $dimentions;

  $noscript = [
    '#noscript' => TRUE,
    '#tag' => 'style',
    '#value' => '.drimage-image { display: none; }',
  ];

  $attachments['#attached']['html_head'][] = [$noscript, 'noscript'];
}
