<?php

/**
 * @file
 * Functions to support theming in the mcgreen_acres_theme theme.
 */

use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\commerce_product\Entity\ProductInterface;
use Drupal\file\Entity\File;
use Drupal\image\Entity\ImageStyle;
use Drupal\layout_builder\Entity\LayoutEntityDisplayInterface;

// * Include all files from the includes directory.
$includes_path = dirname(__FILE__) . '/includes/*.inc';
foreach (glob($includes_path) as $filename) {
  require_once dirname(__FILE__) . '/includes/' . basename($filename);
}

/**
 * Implements hook_preprocess_paragraph().
 */
function mcgreen_acres_theme_preprocess_paragraph(&$variables) {
  if ($variables['paragraph']->bundle() == 'carousel_cta'
    && isset($variables['paragraph']->bp_image_field)
    && isset($variables['paragraph']->bp_image_field->target_id)) {

    // Get the target id and build the url.
    $file_path = NULL;
    $paragraph = &$variables['paragraph'];
    if (isset($paragraph->get('bp_image_field')->entity)
      && isset($paragraph->get('bp_image_field')->entity->field_media_image)
      && isset($paragraph->get('bp_image_field')->entity->field_media_image->target_id)) {

      $target_id = $paragraph->get('bp_image_field')->entity->field_media_image->target_id;
      $file = File::load($target_id);
      if (isset($file)) {
        $file_uri = $file->getFileUri();
        $style = ImageStyle::load('d12_standard');
        $file_path = $style->buildUrl($file_uri);
      }
    }
    if (empty($variables['MCGA'])) {
      $variables['MCGA'] = [];
    }
    $variables['MCGA']['image'] = [
      'url' => $file_path,
    ];

  }
}

/**
 * Implements hook_preprocess_HOOK() for html.html.twig.
 */
function mcgreen_acres_theme_preprocess_html(array &$variables) {
  /* Add class to html tag */
  //$variables['html_attributes']->addClass('no-js');

  // Don't display the site name twice on the front page (and potentially others)
  /*if (isset($variables['head_title_array']['title']) && isset($variables['head_title_array']['name']) && ($variables['head_title_array']['title'] == $variables['head_title_array']['name'])) {
    $variables['head_title'] = $variables['head_title_array']['name'];
  }*/
}

/**
 * Implements hook_page_attachments_alter().
 */
function mcgreen_acres_theme_page_attachments_alter(array &$page) {
  // Tell IE to use latest rendering engine (not to use compatibility mode).
  /*$ie_edge = [
    '#type' => 'html_tag',
    '#tag' => 'meta',
    '#attributes' => [
    'http-equiv' => 'X-UA-Compatible',
    'content' => 'IE=edge',
    ],
  ];
  $page['#attached']['html_head'][] = [$ie_edge, 'ie_edge'];*/
}

/**
 * Implements hook_preprocess_page() for page.html.twig.
 */
function mcgreen_acres_theme_preprocess_page(array &$variables) {
  $variables['theme_path'] = base_path() . $variables['directory'];
  $variables['force_container'] = FALSE;
  $current_path = \Drupal::service('path.current')->getPath();
  $container_paths = [
    '/webform',
    '/webform/*',
    '/user/*',
    '/product/*',
    '/checkout/*',
    '/cart',
  ];
  if (!empty($variables['node']) && empty($variables['is_front']) && $variables['node']->bundle() == 'page') {
    $variables['force_container'] = TRUE;
  }
  if (\Drupal::service('path.matcher')->matchPath($current_path, implode("\n", $container_paths))) {
    $variables['force_container'] = TRUE;
  }
  $current_user = \Drupal::currentUser();
  if ($current_user->isAuthenticated()) {
    /** @var \Drupal\user\Entity\User **/
    $user = \Drupal::entityTypeManager()->getStorage('user')->load($current_user->id());

    // Add the user ID to the variables array.
    $variables['user_id'] = $user->id();

    // Add the user name to the variables array.
    $variables['user_name'] = $user->getDisplayName();
    $variables['user_initials'] = substr($variables['user_name'], 0, 1);
  }

}

/**
 * Implements hook_theme_suggestions_page_alter().
 */
function mcgreen_acres_theme_theme_suggestions_page_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_theme_suggestsions_user_alter().
 */
function mcgreen_acres_theme_theme_suggestions_user_alter(array &$suggestions, array $variables) {
  $suggestions[] = $variables['theme_hook_original'] . '__' . $variables['elements']['#view_mode'];

}

/**
 * Implements hook_theme_suggestions_node_alter().
 */
function mcgreen_acres_theme_theme_suggestions_node_alter(array &$suggestions, array $variables) {
  /*$node = $variables['elements']['#node'];

  if ($variables['elements']['#view_mode'] == "full") {

  }*/
}

/**
 * Implements hook_preprocess_HOOK() for Block document templates.
 */
function mcgreen_acres_theme_preprocess_block(array &$variables) {

}


/**
 * Implements hook_theme_suggestions_HOOK_alter() for commerce_product templates.
 */
function mcgreen_acres_theme_theme_suggestions_commerce_product_alter(array &$suggestions, array $variables) {
  // View mode and theme settings
  $product = $variables['elements']['#commerce_product'];
  $view_mode = $variables['elements']['#view_mode'];
  if (!empty($product) && $product instanceof ProductInterface && !is_null($view_mode)) {
    _mcgreen_acres_theme_alter_entity_suggestions($suggestions, $product, $view_mode);
  }
  // Limiting to catalog display mode
  $display = theme_get_setting('product_teaser');
  if ($display) {
    switch($view_mode) {
      case 'teaser':
        $suggestions[] = 'commerce_product__' . $view_mode . '__' . $display;
        break;
    }
  }
}

function mcgreen_acres_theme_preprocess_commerce_product(array &$variables) {
  $stuff=1;
}

/**
 * Implements hook_preprocess_node().
 */
function mcgreen_acres_theme_preprocess_node(array &$variables) {
  $blah = 1;
  if ($variables['node']->type == 'article' && $variables['node']->view_mode == 'teaser') {
    $variables['content']['links']['#attributes']['class'][] = 'clearfix';
  }
  $query = \Drupal::entityQuery('node');
  $or_group = $query->orConditionGroup()
    // Add a condition to the group: the field_tags must be 22.
    ->condition('field_tags', 22)
    // Add another condition to the group: the node ID must be 17.
    ->condition('nid', 17);

  // Construct an Entity Query for nodes.
  $result = $query->condition($or_group)
    ->condition('nid', $variables['node']->id())
    ->accessCheck(FALSE)
    ->execute();

  if (!empty($result)) {
    // Entities that reference the target entity exist.
    $variables['cta'] = 'mcgreen_acres_theme_webform_herd_share_wait_list';
  } else {
    // No entities reference the target entity through this field.
  }
}

/**
 * Implements hook_theme_suggestions_views_view_alter().
 */
function mcgreen_acres_theme_theme_suggestions_views_view_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_preprocess_form().
 */
function mcgreen_acres_theme_preprocess_form(array &$variables) {
  //$variables['attributes']['novalidate'] = 'novalidate';
}

/**
 * Implements hook_preprocess_select().
 */
function mcgreen_acres_theme_preprocess_select(array &$variables) {
  //$variables['attributes']['class'][] = 'select-chosen';
}

/**
 * Implements hook_preprocess_field().
 */
function mcgreen_acres_theme_preprocess_field(array &$variables, $hook) {
  /*switch ($variables['element']['#field_name']) {
  }*/
}

/**
 * Implements hook_preprocess_details().
 */
function mcgreen_acres_theme_preprocess_details(array &$variables) {
  /*$variables['attributes']['class'][] = 'details';
  $variables['summary_attributes']['class'] = 'summary';*/
}

/**
 * Implements hook_theme_suggestions_details_alter().
 */
function mcgreen_acres_theme_theme_suggestions_details_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_preprocess_menu_local_task().
 */
function mcgreen_acres_theme_preprocess_menu_local_task(array &$variables) {
  $variables['element']['#link']['url']->setOption('attributes', ['class'=>'nav-link']);
}

function mcgreen_acres_theme_preprocess_menu(&$variables) {
  // To target a specific menu (e.g., main menu):
  if ($variables['menu_name'] == 'account') {
    foreach ($variables['items'] as $key => &$item) {
      $item['url']->setOption('attributes', ['class' => ['nav-link']]);
    }
  }
}

/**
 * Implements theme_links__node().
 */
function mcgreen_acres_theme_preprocess_links__node(array &$variables) {
  if (!empty($variables['links']) && !empty($variables['links']['node-readmore'])) {
    $readmore_link = &$variables['links']['node-readmore']['link'];
    $readmore_link['#title'] = t(
      '<i class="fa fa-caret-square-o-down" aria-hidden="true"></i> ' . $readmore_link['#title']->getUntranslatedString(),
      $readmore_link['#title']->getArguments()
    );
  }
  if (!empty($variables['links']) && !empty($variables['links']['disqus_comments_num'])) {
    unset($variables['links']['disqus_comments_num']);
  }

}

/**
 * Belgrade theme alter entity suggestions.
 */
function _mcgreen_acres_theme_alter_entity_suggestions(array &$suggestions, ContentEntityInterface $entity, string $view_mode) {
  $entity_type_id = $entity->getEntityTypeId();
  /** @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository */
  $entity_display_repository = \Drupal::service('entity_display.repository');
  $display = $entity_display_repository->getViewDisplay($entity_type_id, $entity->bundle());
  if ($display instanceof LayoutEntityDisplayInterface && $display->isLayoutBuilderEnabled()) {
    if ($view_mode === "full") {
      array_splice($suggestions, 1, 0, $entity_type_id . '__layout__full__' . $entity->bundle());
      array_splice($suggestions, 1, 0, $entity_type_id . '__layout__full');
    }
    array_splice($suggestions, 1, 0, $entity_type_id . '__layout__' . $entity->bundle());
    array_splice($suggestions, 1, 0, $entity_type_id . '__layout');
  }
}
